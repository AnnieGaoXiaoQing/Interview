1、HashMap实现原理
2、HashMap的容量为什么一定要是2的次幂
3、HashMap和HashTable的区别
4、HashMap如何解决hash冲突
3、

文章：
https://www.toutiao.com/a6730862442433217028/
https://www.toutiao.com/a6701258371258909195/

一、HashMap实现原理：
   HashMap结构：数组+单链表
   桶：数组中的每个节点，桶由单链表组成
   JDK1.8之后为解决长链表下查询和插入效率低的情况，引入红黑树作为桶的实现方式
缺点：
   线程不安全，多线程情况下使用ConcurrentHashMap
新增
    1、确定数组元素在数组中的位置，采用hash算法，根据key的hash值，按照表达式（n-1）& hash计算出桶的下标
    2、若桶为空，则创建一个新的node，作为链表第一个元素
    3、若存在，会区分树节点和普通节点
    注：
        新增前会判断底层数组是否初始化，新增后会判断该桶是否超过8，超过则转换为红黑树，再判断整个数组是否需要扩容
        hash算法寻找下标称之为冲突或者碰撞
        hash算法的要求是尽量发生少的碰撞，从而均匀散布在数组中。而发生碰撞时像hashMap这种以一个列表下挂方式可以称为拉链法
查找
    1、同样是根据表达式（n-1）& hash计算出桶的下标，若得到为空，则返回null
    2、不为空则遍历整个桶，根据key.equals（k）判断是否相等
    3、遍历会分根据节点类型的不同而不同
    注：
        数组遍历复杂度O(1)，链表查询O(n)，DK1.8之后引入的红黑树作为桶的另一种实现方法.当链表长度大于8时,桶的实现会转化为红黑树
重排
    前提：数组长度不变时，链表越长操作性能越低，有必要通过扩充数组的方式，重新排列桶中元素
    触发：size > threshold即元素个数大于阈值.整个扩容过程可以简单的拆分为以下几步:
    1、对数组进行扩充,一般情况下是数组容量和阈值都变为原来的两倍,此间会有上限判断,容量最大为1 << 30也就是2^30.
    2、遍历旧数组,重新判断元素的位置并散布到新数组.

二、 HashMap的容量为什么一定要是2的次幂
 容量为2次幂有两个优点
1、在下标运算的时候使用(length - 1) & hash)代替hash % length，相对来说位运算性能更佳，速度更快。
2、而在采用(length - 1) & hash的方式计算下标之后，如果不是二次幂的容量，出现碰撞的几率将会大大增加，例如我们取17作为容量((17 -1) => 0001000)，
   经过&与运算，可以想象会有一大批的元素直接挂在0号桶。

三、HashMap和HashTable的区别

  最大的区别就是HashTable是线程安全的,暴力的加方法级synchronized.而HashMap是线程不安全的,并发情况下可能会出现数据丢失等情况.
  HashTable不允许null值,而HashMap允许null值.(包括key和value)
  HashCode的使用不同,HashTable是直接调用hashCode,而HashMap会经过扰动函数.而且HashMap中用&代替了%
  HashTable数组默认是11,且增长为2n+1,而HashMap默认为16,增长为2n,且硬性要求长度为2的次幂.
  HashTable并不是和HashMap一样继承自AbstractMap的,它继承自一个独立的父类AbstractDictionary
  还有就是遍历方法的不同.了解不深先不说话.

四、为什么用数组和链表
    数组是用来确定桶的位置，利用元素的key的hash值对数组长度取模得到.
    链表是用来解决hash冲突问题，当出现hash值一样的情形，就在数组上的对应位置形成一条链表。ps:这里的hash值并不是指hashcode，而是将hashcode高低十六位异或过的。

五、hash冲突你还知道哪些解决办法
  比较出名的有四种(1)开放定址法(2)链地址法(3)再哈希法(4)公共溢出区域法

六、可以用linkedList代替数组吗？可以，为什么不用
   因为用数组效率最高！
   在HashMap中，定位桶的位置是利用元素的key的哈希值对数组长度取模得到。此时，我们已得到桶的位置。显然数组的查找效率比LinkedList大。
   那ArrayList，底层也是数组，查找也快啊，为啥不用ArrayList?
   因为采用基本数组结构，扩容机制可以自己定义，HashMap中数组扩容刚好是2的次幂，在做取模运算的效率高。而ArrayList的扩容机制是1.5倍扩容